# a table to link two people
db.define_table('link',
    Field('source','reference auth_user'),
    Field('target','reference auth_user'),
    Field('accepted','boolean',default=False)
    )

# a table to store posted messages
db.define_table('post',
    Field('body','text',requires=IS_NOT_EMPTY(),label='What is the charge for?'),
    Field('image', 'upload', label='Attach a receipt?'),
    Field('posted_on','datetime',readable=False,writable=False),
    Field('posted_by','reference auth_user',readable=False,writable=False),
    #^the person requesting money
    Field('posted_to','reference auth_user', label='Who is the charge to?'),
    #^the person being charged
    Field('amount', 'double'),
    #^more constraints needed?
    #Field('charge', 'boolean', default=False, label='Check this box if you want to pay this user instead of charging them'),
    #^false if you want to charge this user, true if you want to pay them
    Field('paid', 'boolean', default=False, readable=False,writable=False),
    #^returns true after paypal confirms payment
    Field('paid_on', 'datetime',readable=False,writable=False)
    #Field('uniqueID', default=-1)
    )



db.define_table('friendlist',
    Field('user','reference auth_user'),
    Field('friends','list:reference auth_user')
    )

# and define some global variables that will make code more compact
User, Link, Post = db.auth_user, db.link, db.post
me, a0, a1 = auth.user_id, request.args(0), request.args(1)
myfriends = db(Link.source==me or Link.target==me)(Link.accepted==True)
alphabetical = User.first_name|User.last_name
def name_of(user): return '%(first_name)s %(last_name)s' % user
